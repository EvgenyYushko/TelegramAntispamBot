#!/bin/bash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKUP_FILE_NAME="backup.dump"
RENDER_API_KEY="rnd_sZLs5c8GIjjEmSc7EwblTKTvoTLZ"
DB_ID="dpg-cu365mt2ng1s73c6t8b0-a"
WEB_SERVICE_ID="srv-ctaoq5hu0jms73f1l3q0"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
trap 'handle_error' ERR
handle_error() {
  echo "‚ùå Script failed! Attempting to start the web service..."
  curl -X POST "https://api.render.com/v1/services/$WEB_SERVICE_ID/resume" \
    -H "Authorization: Bearer $RENDER_API_KEY"
  exit 1
}

echo "üõë Stopping web service..."
curl -s -X POST "https://api.render.com/v1/services/$WEB_SERVICE_ID/suspend" \
  -H "Authorization: Bearer $RENDER_API_KEY"
#sleep 60

# –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –ë–î
echo "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ë–î..."
DB_INFO=$(curl -s -X GET "https://api.render.com/v1/postgres/$DB_ID" \
  -H "accept: application/json" \
  -H "authorization: Bearer $RENDER_API_KEY")

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
if [ -z "$DB_INFO" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ë–î."
  exit 1
fi

# –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
echo "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
CONNECTION_INFO=$(curl -s -X GET "https://api.render.com/v1/postgres/$DB_ID/connection-info" \
  -H "accept: application/json" \
  -H "authorization: Bearer $RENDER_API_KEY")

# –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
if [ -z "$CONNECTION_INFO" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
  exit 1
fi

# –®–∞–≥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_NAME=$(echo "$DB_INFO" | jq -r '.databaseName')
DB_PORT=5432  # –ü–æ—Ä—Ç PostgreSQL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DB_USER=$(echo "$DB_INFO" | jq -r '.databaseUser')
DB_HOST="$DB_ID.oregon-postgres.render.com"
DB_PASSWORD=$(echo "$CONNECTION_INFO" | jq -r '.password')

# –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
if [ -z "$DB_HOST" ] || [ -z "$DB_PORT" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ] || [ -z "$DB_NAME" ]; then
  echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
  echo "DB_NAME=$DB_NAME DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD"
  echo "CONNECTION_INFO: $CONNECTION_INFO"
  echo "DB_INFO: $DB_INFO"
  exit 1
fi

echo "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:"
echo "DB_NAME=$DB_NAME DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_USER=$DB_USER DB_PASSWORD=$DB_PASSWORD"

# –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞
echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞..."
export PGPASSWORD=$DB_PASSWORD
pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -Fc -f $BACKUP_FILE_NAME

#pwd
#ls -lh backup.dump
#rm -i backup.dump

if [ $? -eq 0 ]; then
  echo "‚úÖ –ë–µ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: $BACKUP_FILE_NAME"
else
  echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø."
fi

echo "Try suspend"
curl -s -X GET "https://api.render.com/v1/postgres/$DB_ID"/suspend \
  -H "accept: application/json" \
  -H "authorization: Bearer $RENDER_API_KEY"

echo "üöÄ Starting web service..."
curl -X POST "https://api.render.com/v1/services/$WEB_SERVICE_ID/resume" \
    -H "Authorization: Bearer $RENDER_API_KEY"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo "üîç Checking site availability..."
MAX_RETRIES=10
RETRY_INTERVAL=30
SITE_URL="https://telegramantispambot.onrender.com/"

for i in $(seq 1 $MAX_RETRIES); do
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SITE_URL)
  if [ "$HTTP_STATUS" -eq 200 ]; then
    echo "‚úÖ Site is up!"
    exit 0
  fi
  sleep $RETRY_INTERVAL
done

echo "‚ùå Site failed to start after $MAX_RETRIES attempts."
exit 1
