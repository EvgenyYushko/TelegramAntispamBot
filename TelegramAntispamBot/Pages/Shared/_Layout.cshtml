@using System.Threading
@using Microsoft.AspNetCore.Mvc.Localization
@{
	var currentCulture = Thread.CurrentThread.CurrentCulture.Name;
}
@inject IViewLocalizer Loc
@using System.Linq
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<!DOCTYPE html>
<html lang="en">
<head>
	<link rel="icon" href="~/images/Bot.jpg" type="image/png" />
	<script async src="https://www.googletagmanager.com/gtag/js?id=G-S7W8HPXKEK"></script>
	<script>
		window.dataLayer = window.dataLayer || [];
		function gtag() { dataLayer.push(arguments); }
		gtag('js', new Date());
		gtag('config', 'G-S7W8HPXKEK');
	</script>
	<meta charset="utf-8"/>
	@* <meta name="viewport" content="width=device-width, initial-scale=1.0" /> *@
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
	<title>@ViewData["Title"]</title>

	<!-- Подключаем сначала Telegram стили -->
	<link rel="stylesheet" href="~/css/telegram-theme.css" asp-append-version="true" />

	<!-- Затем Bootstrap с ограниченной областью действия -->
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

	<style>
		/* Стили для навбара в Telegram-стиле */
		.tg-navbar {
			background-color: var(--tg-secondary-bg);
			border-bottom: 1px solid var(--tg-border-color);
			padding: 0.5rem 1rem;
		}

		.tg-navbar-brand {
			color: var(--tg-text-color) !important;
			font-weight: 500;
			font-size: 1.1rem;
		}

		.tg-nav-link {
			color: var(--tg-text-color) !important;
			padding: 0.5rem 1rem;
			margin: 0 0.2rem;
			border-radius: 8px;
			transition: background-color 0.2s;
		}

			.tg-nav-link:hover,
			.tg-nav-link.active {
				background-color: rgba(46, 166, 255, 0.1);
				color: var(--tg-primary-color) !important;
			}

		.tg-navbar-toggler {
			border: 1px solid var(--tg-border-color);
			padding: 0.25rem 0.5rem;
		}

		.tg-navbar-toggler-icon {
			background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.8%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e");
		}

		/* Адаптивные стили */
		@@media (max-width: 992px) {
			.tg-navbar {
				padding: 0.5rem;
			}

			.navbar-collapse {
				background-color: var(--tg-secondary-bg);
				border-radius: 0 0 8px 8px;
				padding: 0.5rem;
				margin-top: 0.5rem;
			}

			.tg-nav-link {
				margin: 0.2rem 0;
			}
		}

		/* стили для формы ошибки */
		.tg-modal {
			position: fixed;
			z-index: 9999;
			inset: 0;
			background-color: rgba(0, 0, 0, 0.65);
			backdrop-filter: blur(2px);
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: 'Segoe UI', sans-serif;
		}

		.tg-modal-content {
			background-color: #2a2e33;
			color: #fff;
			border: 1px solid #ff4c4c;
			border-radius: 16px;
			width: 90%;
			max-width: 500px;
			padding: 20px;
			box-shadow: 0 0 30px rgba(255, 76, 76, 0.3);
			animation: tgFadeScaleIn 280ms cubic-bezier(0.34, 1.56, 0.64, 1);
		}

		.tg-modal-header {
			display: flex;
			align-items: center;
			justify-content: space-between;
			margin-bottom: 10px;
		}

		.tg-modal-icon {
			font-size: 24px;
			margin-right: 8px;
		}

		.tg-modal-title {
			flex-grow: 1;
			font-size: 18px;
			font-weight: bold;
			color: #ff6e6e;
		}

		.tg-close-button {
			font-size: 24px;
			color: #bbb;
			cursor: pointer;
		}

			.tg-close-button:hover {
				color: #fff;
			}

		.tg-modal-body {
			font-size: 14px;
			white-space: pre-wrap;
			background: #1f2227;
			padding: 12px;
			border-radius: 10px;
			border-left: 4px solid #ff4c4c;
			overflow-x: auto;
		}

		.tg-modal-footer {
			margin-top: 16px;
			text-align: right;
		}

		.tg-modal-button {
			background-color: #2f8cff;
			color: white;
			border: none;
			border-radius: 8px;
			padding: 8px 16px;
			font-size: 14px;
			font-weight: 500;
			cursor: pointer;
			transition: background-color 0.2s ease;
		}

			.tg-modal-button:hover {
				background-color: #1e72d0;
			}

		@@keyframes fadeIn {
			from

		{
			opacity: 0;
			transform: scale(0.95);
		}

		to {
			opacity: 1;
			transform: scale(1);
		}

		}

		@@keyframes tgFadeScaleIn {
			0%

		{
			opacity: 0;
			transform: scale(0.92);
		}

		60% {
			opacity: 1;
			transform: scale(1.02);
		}

		100% {
			transform: scale(1);
		}

		}
	</style>
</head>
<body class="tg-theme">
	<div class="page-container">
		<header>
			<nav class="navbar navbar-expand-lg tg-navbar">
				<div class="container-fluid">
					<a class="navbar-brand tg-navbar-brand" href="#">@Loc["BotName"]</a>
					<button class="navbar-toggler tg-navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon tg-navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse" id="navbarNav">
						<ul class="navbar-nav">
							<li class="nav-item">
								@{
									var currentPath = HttpContextAccessor.HttpContext.Request.Path;
								}
								<a class="nav-link tg-nav-link @(currentPath == "/" ? "active" : "")" href="/">@Loc["Main"]</a>
							</li>
							<li class="nav-item">
								<a class="nav-link tg-nav-link @(currentPath.Value.StartsWith("/privacy", StringComparison.OrdinalIgnoreCase) ? "active" : "")" href="/privacy">@Loc["Privacy_Policy"]</a>
							</li>
							<li class="nav-item">
								<a class="nav-link tg-nav-link @(currentPath.Value.StartsWith("/User/Profile", StringComparison.OrdinalIgnoreCase) 
									|| currentPath.Value.StartsWith("/Account/Login", StringComparison.OrdinalIgnoreCase)
									|| currentPath.Value.StartsWith("/Account/Register", StringComparison.OrdinalIgnoreCase)? "active" : "")" href="/Account/Login">@Loc["Account"]</a>
							</li>
						</ul>
					</div>
				</div>
			</nav>
		</header>

		<main role="main" class="flex-grow-1">
			<!-- Изменено -->
			<div class="tg-container">
				@RenderBody()
			</div>
		</main>

		<footer class="tg-footer">
			<div class="container d-flex justify-content-center align-items-center gap-3">
				<span>
					<a asp-area="" asp-page="/Privacy">@Loc["Privacy_Policy"]</a>
				</span>
				@* <div class="tg-language-container"> *@
					<form method="post" asp-page="/SetLanguageModel">
						<select name="language" onchange="this.form.submit()"
								class="tg-language-select">
							<option value="ru" selected="@(currentCulture == "ru")">🏳 Русский</option>
							<option value="en" selected="@(currentCulture == "en")">🏳‍🌈 English</option>
						</select>
					</form>
				@* </div> *@
			</div>
		</footer>
	</div>

	<script src="~/lib/jquery/dist/jquery.min.js"></script>
	<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/js/site.js" asp-append-version="true"></script>

	@await RenderSectionAsync("Scripts", false)
</body>
@* форма с ошибкой *@
<div id="cronModal" class="tg-modal" style="display:none;">
	<div class="tg-modal-content">
		<div class="tg-modal-header">
			<span class="tg-modal-icon">⚠️</span>
			<span class="tg-modal-title">Ошибка Cron-выражения</span>
			<span class="tg-close-button" onclick="closeCronModal()">&times;</span>
		</div>
		<div class="tg-modal-body">
			<pre id="cronModalText"></pre>
		</div>
		<div class="tg-modal-footer">
			<button class="tg-modal-button" onclick="closeCronModal()">Понятно</button>
		</div>
	</div>
</div>
</html>

