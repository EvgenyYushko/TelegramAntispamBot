@page
@using Infrastructure.Enumerations
@using Microsoft.AspNetCore.Mvc.Localization
@model RegisterModel
@{
	Layout = "~/Pages/Shared/_Layout.cshtml";
	var roles = Enum.GetNames(typeof(Role)).Where(role => role != nameof(Role.Admin)).ToList();
}
@inject IViewLocalizer Loc

<style>
	.tg-register-form {
		max-width: 400px;
		margin: 0 auto;
	}

	.tg-form-input {
		width: 100%;
		padding: 12px 16px;
		margin-bottom: 16px;
		background-color: var(--tg-secondary-bg);
		border: 1px solid var(--tg-border-color);
		border-radius: 8px;
		color: var(--tg-text-color);
	}

	.tg-form-label {
		display: block;
		margin-bottom: 8px;
		color: var(--tg-hint-color);
		font-size: 14px;
	}

	.tg-register-btn {
		width: 100%;
		padding: 12px;
		background-color: var(--tg-primary-color);
		color: white;
		border: none;
		border-radius: 8px;
		font-weight: 500;
		cursor: pointer;
		transition: opacity 0.2s;
	}

		.tg-register-btn:hover {
			opacity: 0.9;
		}

	.tg-login-link {
		color: var(--tg-primary-color);
		text-decoration: none;
	}

		.tg-login-link:hover {
			text-decoration: underline;
		}

	.tg-verification-group {
		display: flex;
		gap: 10px;
		align-items: stretch; /* Изменено с center на stretch */
	}

		.tg-verification-group input {
			flex: 1;
			margin-bottom: 0; /* Убираем margin-bottom для input внутри группы */
		}

	.tg-send-code-btn {
		padding: 0 16px; /* Уменьшаем вертикальные отступы */
		background-color: var(--tg-primary-color);
		color: white;
		border: none;
		border-radius: 8px;
		font-weight: 500;
		cursor: pointer;
		transition: opacity 0.2s;
		white-space: nowrap;
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 120px; /* Добавляем минимальную ширину */
	}

		.tg-send-code-btn:hover {
			opacity: 0.9;
		}
</style>
<script>
	async function sendVerificationCode() {
		const email = document.getElementById('Email').value;
		const btn = document.querySelector('.send-code-btn');

		if (!email) {
			alert('@Loc["Enter_Email_First"]');
			return;
		}

		btn.disabled = true;
		let seconds = 60;

		const timer = setInterval(() => {
			btn.textContent = `@Loc["Resend_In"] (${seconds})`;
			seconds--;

			if (seconds < 0) {
				clearInterval(timer);
				btn.disabled = false;
				btn.textContent = '@Loc["Send_Code"]';
			}
		}, 1000);

		try {
			const response = await fetch(`?handler=SendVerifyMessage&email=${encodeURIComponent(email)}`, {
				method: 'GET',
				headers: { 'Content-Type': 'application/json' },
			});

		} catch (error) {
			console.error('Error:', error);
			alert('@Loc["SendError"]');
		}
	}
</script>
<div class="tg-container">
	<div class="tg-card">
		<h3 class="tg-card-title">@Loc["Create"]</h3>

		<form method="post" asp-page-handler="Register" class="tg-register-form">
			<div>
				<label for="Username" class="tg-form-label">@Loc["Username"]</label>
				<input type="text" id="Username" name="Username" class="tg-form-input" placeholder="@Loc["Enter_username"]" required>
			</div>
			<div>
				<label for="Email" class="tg-form-label">@Loc["Email"]</label>
				<input type="email" id="Email" name="Email" class="tg-form-input" placeholder="@Loc["Input_Email"]" required>
			</div>
			<div>
				<label for="VerificationCode" class="tg-form-label">@Loc["Enter_Code"]</label>
				<div class="tg-verification-group">
					<input type="text"
						   id="VerificationCode"
						   name="VerificationCode"
						   class="tg-form-input"
						   placeholder="@Loc["Enter_Code"]"
						   required
						   maxlength="6">
					<button type="button"
							class="tg-send-code-btn"
							onclick="sendVerificationCode()">
						@Loc["Send_Code"]
					</button>
				</div>
			</div>
			<div>
				<label for="Role" class="tg-form-label">@Loc["Select_Role"]</label>
				<select id="Role" name="SelectedRole" class="tg-form-input" required>
					@foreach (var role in roles)
					{
						<option value="@role">@role</option>
					}
				</select>
			</div>
			<div>
				<label for="Password" class="tg-form-label">@Loc["Password"]</label>
				<input type="password" id="Password" name="Password" class="tg-form-input" placeholder="@Loc["Create_password"]" required>
			</div>
			<div asp-validation-summary="All" class="tg-error-summary"></div>
			<button type="submit" class="tg-register-btn">@Loc["Register"]</button>
		</form>

		<div class="tg-text-center" style="margin-top: 20px; text-align: center;">
			<p>
				@Loc["Already_Account"] <a href="/Account/Login" class="tg-login-link">@Loc["Login_here"]</a>
			</p>
		</div>

		<div class="tg-social-auth" style="margin: 10px 0;" >
			@await Html.PartialAsync("_ExternalLoginButtons")
		</div>
	</div>
</div>
