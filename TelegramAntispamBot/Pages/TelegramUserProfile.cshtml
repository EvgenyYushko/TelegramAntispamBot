@page
@model TelegramUserProfileModel
@{
	Layout = "~/Pages/Shared/_Layout.cshtml";
	ViewData["Title"] = "User Profile";
	var tgUser = Model.TgUser;
	var chatLocal = tgUser.Permissions.Where(p => p.ChatId.Equals(Model.ChatId)).Select(p => p.Chanel).FirstOrDefault();
}

<style>
	/* Специфичные стили для этой страницы */
	.tg-user-details {
		display: flex;
		flex-direction: column;
		gap: 12px;
		padding: 16px;
	}

	.tg-user-id {
		color: var(--tg-hint-color);
		font-size: 14px;
	}

	.tg-permission-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 12px 16px;
		border-bottom: 1px solid var(--tg-border-color);
	}

	.tg-message-input {
		width: 100%;
		padding: 12px;
		margin-top: 16px;
		background-color: var(--tg-secondary-bg);
		border: 1px solid var(--tg-border-color);
		border-radius: 8px;
		color: var(--tg-text-color);
		resize: vertical;
	}

	.tg-send-btn {
		margin-top: 8px;
		padding: 10px 16px;
		background-color: var(--tg-success-color);
		color: white;
		border: none;
		border-radius: 8px;
		cursor: pointer;
		transition: background-color 0.2s;
	}

		.tg-send-btn:hover {
			background-color: var(--tg-success-color);
			opacity: 0.9;
		}

	.tg-permission-switch {
		position: relative;
		display: inline-block;
		width: 40px;
		height: 20px;
	}

	.tg-permission-slider {
		position: absolute;
		cursor: pointer;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: var(--tg-border-color);
		transition: .4s;
		border-radius: 20px;
	}

		.tg-permission-slider:before {
			position: absolute;
			content: "";
			height: 16px;
			width: 16px;
			left: 2px;
			bottom: 2px;
			background-color: white;
			transition: .4s;
			border-radius: 50%;
		}

	input:checked + .tg-permission-slider {
		background-color: var(--tg-success-color);
	}

		input:checked + .tg-permission-slider:before {
			transform: translateX(20px);
		}
</style>

<div class="tg-container">
	<div class="tg-header">
		<h1>@tgUser.Name</h1>
		<p class="tg-user-id">User ID: @tgUser.UserId</p>
	</div>

	<div class="tg-card">
		<h3 class="tg-card-title">User Details</h3>
		<div class="tg-user-details">
			<div>
				<span class="tg-profile-label">Username:</span>
				<span class="tg-profile-value">@tgUser.Name</span>
			</div>
			@if (Model.ChatId != 0)
			{
				<div>
					<span class="tg-profile-label">Role in Chat:</span>
					<span class="tg-profile-value">@chatLocal?.Title</span>
				</div>
			}
		</div>

		<div>
			<textarea class="tg-message-input"
					  id="message-input-@tgUser.UserId"
					  rows="3"
					  placeholder="Type your message..."></textarea>
			<button class="tg-send-btn" onclick="sendMessage(@tgUser.UserId)">
				Send Message
			</button>
		</div>
	</div>

	@if (Model.ChatId != 0)
	{
		<div class="tg-card">
			<h3 class="tg-card-title">Permissions</h3>
			<div class="tg-button-grid">
				@foreach (var permission in tgUser.Permissions.Where(p => p.ChatId.Equals(Model.ChatId)))
				{
					<div class="tg-permission-item">
						<span>Send Links</span>
						<label class="tg-permission-switch">
							<input type="checkbox" @(permission.SendLinks ? "checked" : "")
								   onchange="toggleSendLinks(@permission.UserId, this, @permission.ChatId)">
							<span class="tg-permission-slider"></span>
						</label>
					</div>
				}
			</div>
		</div>
	}
</div>

<script>
	async function toggleSendLinks(userId, checkbox, chatId) {
		const sendLinks = checkbox.checked;

		const response = await fetch(`TelegramUserProfile?handler=SetRightLiks&userId=${userId}&sendLinks=${sendLinks}&chatId=${chatId}`, {
			method: 'GET',
			headers: { 'Content-Type': 'application/json' },
		});

		if (!response.ok) {
			alert('Error updating permissions');
			checkbox.checked = !sendLinks;
		}
	}

	async function sendMessage(userId) {
		const input = document.getElementById(`message-input-${userId}`);
		const message = input.value.trim();

		if (!message) {
			alert('Please enter a message');
			return;
		}

		try {
			const response = await fetch(`TelegramUserProfile?handler=SendMessage&userId=${userId}&message=${encodeURIComponent(message)}`, {
				method: 'GET',
				headers: { 'Content-Type': 'application/json' },
			});

			if (response.ok) {
				input.value = '';
				alert('Message sent successfully');
			} else {
				alert('Error sending message');
			}
		} catch (error) {
			console.error('Error:', error);
			alert('Error sending message');
		}
	}
</script>