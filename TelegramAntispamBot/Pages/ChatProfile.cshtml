@page
@model ChatProfileModel
@{
	ViewData["Title"] = "Telegram Chat Profile";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intro.js/7.2.0/introjs.min.css">
<style>
	/* Основные стили остаются без изменений */
	.tg-chat-member {
		display: flex;
		align-items: center;
		padding: 12px 16px;
		border-bottom: 1px solid var(--tg-border-color);
		cursor: pointer;
	}

		.tg-chat-member:hover {
			background-color: rgba(255, 255, 255, 0.05);
		}

	.tg-permission-switch {
		position: relative;
		display: inline-block;
		width: 50px;
		height: 24px;
	}

		.tg-permission-switch input {
			opacity: 0;
			width: 0;
			height: 0;
		}

	.tg-permission-slider {
		position: absolute;
		cursor: pointer;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: var(--tg-border-color);
		transition: .4s;
		border-radius: 24px;
	}

		.tg-permission-slider:before {
			position: absolute;
			content: "";
			height: 16px;
			width: 16px;
			left: 4px;
			bottom: 4px;
			background-color: var(--tg-text-color);
			transition: .4s;
			border-radius: 50%;
		}

	input:checked + .tg-permission-slider {
		background-color: var(--tg-success-color);
	}

		input:checked + .tg-permission-slider:before {
			transform: translateX(26px);
		}

	/* Обновленные стили для выравнивания */
	.tg-profile-items-vertical {
		display: flex;
		flex-direction: column;
		gap: 16px;
	}

	.tg-permission-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 8px;
		border-bottom: 1px solid var(--tg-border-color);
	}

	.tg-permission-control {
		display: flex;
		align-items: center;
		gap: 12px;
		flex: 1;
		min-width: 200px;
	}

	.cron-input-container {
		display: flex;
		align-items: center;
		gap: 8px;
		width: 300px;
		justify-content: flex-end;
	}

	.tg-cron-input {
		width: 180px;
		background: var(--tg-bg-color);
		border: 1px solid var(--tg-border-color);
		color: var(--tg-text-color);
		padding: 8px 12px;
		border-radius: 8px;
		font-size: 14px;
		transition: all 0.2s;
	}

		.tg-cron-input:focus {
			outline: none;
			border-color: #4a90e2;
			box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
		}

	.tg-profile-label {
		white-space: nowrap;
		padding: 8px;
	}

	.cron-help-button {
		background: #4a6baf;
		color: white;
		border: none;
		padding: 5px 10px;
		border-radius: 4px;
		cursor: pointer;
		font-size: 12px;
		flex-shrink: 0;
	}

	/* Адаптивность */
	@@media (max-width: 768px) {
		.tg-permission-item {
			flex-direction: column;
			align-items: stretch;
			gap: 8px;
		}

		.cron-input-container {
			width: 100%;
			justify-content: flex-start;
		}

		.tg-cron-input {
			width: 100%;
			max-width: 260px;
		}
	}

	/* Стили для обучения остаются без изменений */
	.introjs-overlay {
		background-color: rgba(23, 33, 43, 0.85) !important;
		backdrop-filter: blur(2px);
	}

	.introjs-tooltip {
		background: #2e3d4f !important;
		border: 1px solid #3e5365 !important;
		border-radius: 12px !important;
		box-shadow: 0 4px 20px rgba(0,0,0,0.3) !important;
		color: #e1e9f1 !important;
		max-width: 500px !important; /* Увеличено с 380px */
		min-width: 400px !important; /* Добавлено минимальное значение */
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
	}


	.introjs-tooltip-header {
		font-size: 17px !important;
		font-weight: 500 !important;
		color: #2ea6ff !important;
		margin-bottom: 12px !important;
		padding-bottom: 8px;
		border-bottom: 1px solid #3e5365;
	}

	.introjs-tooltiptext {
		font-size: 14px !important;
		line-height: 1.5 !important;
		color: #e1e9f1 !important;
	}

	.introjs-button {
		background: #2ea6ff !important;
		color: white !important;
		border-radius: 8px !important;
		text-shadow: none !important;
		font-weight: 500 !important;
		padding: 8px 14px !important;
		font-size: 13px !important;
		border: none !important;
	}

		.introjs-button.introjs-prevbutton {
			background: transparent !important;
			color: #7d8b99 !important;
			border: 1px solid #3e5365 !important;
		}

		.introjs-button.introjs-skipbutton {
			background: transparent !important;
			color: #7d8b99 !important;
			padding: 6px 10px !important;
			font-size: 12px !important;
		}

	.introjs-arrow {
		border-color: #2e3d4f transparent transparent transparent !important;
	}

	.introjs-bullets ul li a {
		background: #3e5365 !important;
	}

		.introjs-bullets ul li a.active {
			background: #2ea6ff !important;
		}

	.compact-tooltip {
		max-width: 280px !important;
		padding: 10px 12px !important;
		border-radius: 10px !important;
	}

	.tooltip-header {
		font-weight: 600;
		font-size: 15px;
		margin-bottom: 8px;
		color: var(--tg-accent-color);
	}

	.tooltip-content {
		font-size: 13px;
		line-height: 1.5;
	}

		.tooltip-content div {
			margin-bottom: 6px;
			display: flex;
			align-items: center;
			gap: 6px;
		}

		.tooltip-content b {
			white-space: nowrap; /* Номер пункта не переносится */
		}

		.tooltip-content code {
			background: rgba(255,255,255,0.1);
			padding: 2px 4px;
			white-space: nowrap; /* Код не переносится */
			border-radius: 4px;
			font-family: monospace;
		}

	.introjs-button {
		min-width: 60px !important;
		padding: 6px 10px !important;
		font-size: 12px !important;
	}
</style>

<div class="tg-container">
	<div class="tg-header">
		<h1>@Model.Chat.Title</h1>
		<p class="tg-badge">@Model.Chat.ChatType</p>
	</div>

	<div class="tg-card">
		<h3 class="tg-card-title">Chat Details</h3>
		<div class="tg-button-grid">
		<div class="tg-chat-member" onclick="goToUser(@Model.Chat.Creator.UserId, @Model.Chat.TelegramChatId)">
			@Model.Chat.Creator.Name
			</div>
		</div>
	</div>

	<div class="tg-card">
		<h3 class="tg-card-title">Administrators</h3>
		@if (Model.Chat.AdminsIds.Any())
		{
			<div class="tg-button-grid">
				@foreach (var admin in Model.Chat.AdminsMembers)
				{
					<div class="tg-chat-member" onclick="goToUser(@admin.UserId, @Model.Chat.TelegramChatId)">
						@admin.Name
					</div>
				}
			</div>
		}
		else
		{
			<div class="tg-profile-item">
				<span class="tg-profile-value">No administrators</span>
			</div>
		}
	</div>

	<div class="tg-card">
		<h3 id="permissions" class="tg-card-title">Permissions</h3>
		<div class="tg-profile-items-vertical">

			<!-- Currency Permission -->
			<div class="tg-permission-item">
				<div class="tg-permission-control">
					<label id="currencyCron_" class="tg-permission-switch">
						<input type="checkbox" @(Model.Chat.ChatPermission.SendCurrency ? "checked" : "")
							   onchange="togglePermission(this, 'SetAllowCurrency', @Model.Chat.TelegramChatId)">
						<span class="tg-permission-slider"></span>
					</label>
					<span class="tg-profile-label">Получать курсы валют</span>
				</div>
				<div class="cron-input-container">
					<input type="text" class="tg-cron-input"
						   value="@Model.Chat.ChatPermission.CurrencyCronExpression"
						   placeholder="0 0 9 * * ? (9:00 ежедневно)"
						   id="currencyCron_@Model.Chat.TelegramChatId">
					<button class="cron-help-button" onclick="showCronHelp('currencyCron_@Model.Chat.TelegramChatId')">?</button>
				</div>
			</div>

			<!-- Habr Permission -->
			<div class="tg-permission-item">
				<div class="tg-permission-control">
					<label id="habrCron_" class="tg-permission-switch">
						<input type="checkbox" @(Model.Chat.ChatPermission.SendHabr ? "checked" : "")
							   onchange="togglePermission(this, 'SetAllowHabrNews', @Model.Chat.TelegramChatId)">
						<span class="tg-permission-slider"></span>
					</label>
					<span class="tg-profile-label">Получать новости с Habr</span>
				</div>
				<div class="cron-input-container">
					<input type="text" class="tg-cron-input"
						   value="@Model.Chat.ChatPermission.HabrCronExpression"
						   placeholder="0 0 11 * * ? (11:00 ежедневно)"
						   id="habrCron_@Model.Chat.TelegramChatId">
					<button class="cron-help-button" onclick="showCronHelp('habrCron_@Model.Chat.TelegramChatId')">?</button>
				</div>
			</div>

			<!-- Onliner Permission -->
			<div class="tg-permission-item">
				<div class="tg-permission-control">
					<label id="onlinerCron_" class="tg-permission-switch">
						<input type="checkbox" @(Model.Chat.ChatPermission.SendOnliner ? "checked" : "")
							   onchange="togglePermission(this, 'SetAllowOnlinerNews', @Model.Chat.TelegramChatId)">
						<span class="tg-permission-slider"></span>
					</label>
					<span class="tg-profile-label">Получать новости с Onliner</span>
				</div>
				<div class="cron-input-container">
					<input type="text" class="tg-cron-input"
						   value="@Model.Chat.ChatPermission.OnlinerCronExpression"
						   placeholder="0 0 13 * * ? (13:00 ежедневно)"
						   id="onlinerCron_@Model.Chat.TelegramChatId">
					<button class="cron-help-button" onclick="showCronHelp('onlinerCron_@Model.Chat.TelegramChatId')">?</button>
				</div>
			</div>
		</div>
	</div>

	<div class="tg-card">
		<h3 class="tg-card-title">Members</h3>
		<div class="tg-button-grid">
			@foreach (var member in Model.Chat.Members)
			{
				<div class="tg-chat-member" onclick="goToUser(@member.UserId, @Model.Chat.TelegramChatId)">
					@member.Name
				</div>
			}
		</div>
	</div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/intro.js/7.2.0/intro.min.js"></script>
<script>

	function initCronTutorial(elementId) {
		const element = document.getElementById(elementId);

		const switchCronId = elementId.replace(/-?\d+$/, '');

		introJs().setOptions({
			nextLabel: 'Далее →',
			prevLabel: '← Назад',
			doneLabel: 'Понятно ✓',
			skipLabel: '×',
			exitOnOverlayClick: true,
			exitOnEsc: true,
			overlayOpacity: 0.9,
			tooltipClass: 'compact-tooltip',
			highlightClass: 'tg-highlight',
			steps: [
				{
					element: '#permissions',
					intro: `
						<div class="tooltip-header">🤖 Мы используем искусственный интеллект для анализа контекста чата: его названия,
							описания и недавних сообщений. Это помогает автоматически определять, какие новости будут наиболее
							полезными и интересными для участников.</div>
					`,
					position: 'down'
				},
				{
					element: '#' + switchCronId,
					intro: `
						<div class="tooltip-header">Включает отправку сообщений в чат согласно распианию</div>
						<div class="tooltip-content">
							<p>Перед включением, нужно <b>задать распиание.</b></p>
							<p>Если расписание было указано не корректно, то вы получите <s>люлей</s> подробное описание от ИИ, 
								где вы ошиблись, что вы мели ввиду и пример как может выглядеть ваше cron выражение.</b></p>
						</div>
					`,
					position: 'right'
				},
				{
					element: '#' + elementId,
					intro: `
						<div class="tooltip-header">Формат Cron в Quartz</div>
						<div class="tooltip-content">
							<p>Quartz использует <b>6-позиционный формат</b> (с секундами):</p>
							<div><b>1.</b> Секунды: <code>0-59</code></div>
							<div><b>2.</b> Минуты: <code>0-59</code></div>
							<div><b>3.</b> Часы: <code>0-23</code></div>
							<div><b>4.</b> День месяца: <code>1-31</code></div>
							<div><b>5.</b> Месяц: <code>1-12</code> или <code>JAN-DEC</code></div>
							<div><b>6.</b> День недели: <code>1-7</code> (1=Вс, 7=Сб) или <code>SUN-SAT</code></div>
							<div><b>7.</b> Год (опционально): <code>1970-2099</code></div>
						</div>
					`,
					position: 'left'
				},
				{
					element: '#' + elementId,
					intro: `
						<div class="tooltip-header">Специальные символы</div>
						<div class="tooltip-content">
							<div><code>*</code> - Любое значение</div>
							<div><code>?</code> - Нет конкретного значения (только для дня месяца/недели)</div>
							<div><code>*/5</code> - Каждые 5 единиц</div>
							<div><code>1,3,5</code> - Конкретные значения через запятую</div>
							<div><code>10-20</code> - Диапазон значений</div>
							<div><code>L</code> - Последний день месяца/недели</div>
							<div><code>#</code> - N-ый день недели (например, 2#1 - первый понедельник)</div>
						</div>
					`,
					position: 'left'
				},
				{
					element: '#' + elementId,
					intro: `
						<div class="tooltip-header">Примеры для Quartz</div>
						<div class="tooltip-content">
							<div><code>0 0 9 * * ?</code> - Каждый день в 9:00</div>
							<div><code>0 0/30 * * * ?</code> - Каждые 30 минут</div>
							<div><code>0 0 12 ? * MON-FRI</code> - В будни в 12:00</div>
							<div><code>0 0 9 15 * ?</code> - 15-го числа каждого месяца в 9:00</div>
							<div><code>0 0 9 ? * 2#1</code> - Первый понедельник месяца в 9:00</div>
							<div><code>0 0 9 L * ?</code> - В последний день месяца в 9:00</div>
						</div>
					`,
					position: 'left'
				}
				
			]
		}).onexit(() => {
			localStorage.setItem('cronTutorialCompleted', 'true');
		}).start();
	}

	window.showCronHelp = function(elementId) {
		initCronTutorial(elementId);
	};

	function goToUser(userId, chatId) {
		window.location.href = '/TelegramUserProfile?userId=' + userId + '&chatId=' + chatId;
	}

	async function togglePermission(checkbox, methodName, chatId) {
		const isAllowed = checkbox.checked;
		let cronExpression = '';

		// Get corresponding cron expression
		switch(methodName) {
			case 'SetAllowSendNews':
				cronExpression = document.getElementById(`newsCron_${chatId}`).value;
				break;
			case 'SetAllowCurrency':
				cronExpression = document.getElementById(`currencyCron_${chatId}`).value;
				break;
			case 'SetAllowHabrNews':
				cronExpression = document.getElementById(`habrCron_${chatId}`).value;
				break;
			case 'SetAllowOnlinerNews':
				cronExpression = document.getElementById(`onlinerCron_${chatId}`).value;
				break;
		}
		
		const response = await fetch(`ChatProfile?handler=${methodName}&isAllowed=${isAllowed}&cronExpression=${encodeURIComponent(cronExpression)}&chatId=${chatId}`, {
						method: 'GET',
						headers: {
							'Content-Type': 'application/json',
							'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
						},
					});

			if (!response.ok) 
			{
				const errorText = await response.text(); // тут будет "Ошибка: ..."
				showCronModal(errorText);
				checkbox.checked = !isAllowed;
			}
		}

		// Инициализация при первом фокусе
		document.addEventListener('DOMContentLoaded', function() {
		document.querySelectorAll('.tg-cron-input').forEach(input => {
			input.addEventListener('focus', function() {
				if (!localStorage.getItem('cronTutorialCompleted')) {
					initCronTutorial(this.id);
				}
			}, { once: true });
		});
	});
</script>